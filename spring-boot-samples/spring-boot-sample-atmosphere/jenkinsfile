node {
 //  def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      //git 'https://github.com/devopss1/jenkins.git'
      git url:'https://github.com/devopss1/jenkins.git', branch: 'master'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'M2_HOME'
   }
   stage('Build') {
      // Run the maven build
      if (isUnix()) {
      sh "mvn -Dmaven.test.failure.ignore clean package -f ${WORKSPACE}/spring-boot-samples/spring-boot-sample-atmosphere/pom.xml"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('Results') {
     // junit '${WORKSPACE}/spring-boot-samples/spring-boot-sample-atmosphere/target/surefire-reports/*.xml'
    //   archive '"${WORKSPACE}"/spring-boot-samples/spring-boot-sample-atmosphere/target/*.jar'
    //    sh 'chmod 755 "${WORKSPACE}"/spring-boot-samples/spring-boot-sample-atmosphere/target/surefire-reports/*'
    junit 'spring-boot-samples/spring-boot-sample-atmosphere/target/surefire-reports/*.xml'
       
   }

   stage('SonarQube analysis') { 
        withSonarQubeEnv('sonarqube') { 
          sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar ' + 
          '-f spring-boot-samples/spring-boot-sample-atmosphere/pom.xml ' +
          '-Dsonar.projectKey=com.huettermann:all:master ' +
          '-Dsonar.login=admin ' +
          '-Dsonar.password=admin ' +
          '-Dsonar.language=java ' +
          '-Dsonar.sources=. ' +
          '-Dsonar.tests=. ' +
          '-Dsonar.test.inclusions=**/*Test*/** ' +
          '-Dsonar.exclusions=**/*Test*/**'
       }
   }   
    stage("SonarQube Quality Gate") { 
        sleep 20
        timeout(time: 1, unit: 'HOURS') { 
           def qg = waitForQualityGate() 
           if (qg.status != 'OK') {
             error "Pipeline aborted due to quality gate failure: ${qg.status}"
           }
        }
    } 
  stage('Publish') {
     //nexusPublisher nexusInstanceId: 'nexus', nexusRepositoryId: 'snapshots', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: 'spring-boot-samples/spring-boot-sample-atmosphere/target/spring-boot-sample-atmosphere-*.jar']], mavenCoordinate: [artifactId: 'spring-boot-sample-atmosphere', groupId: 'org.jenkins-ci.main', packaging: 'jar', version: '1.4.0.BUILD-SNAPSHOT']]]
     nexusArtifactUploader artifacts: [[artifactId: 'spring-boot-sample-atmosphere', classifier: '', file: 'spring-boot-samples/spring-boot-sample-atmosphere/target/spring-boot-sample-atmosphere-1.4.0.BUILD-SNAPSHOT.jar', type: 'jar']], credentialsId: '615dfd14-4a8e-4a79-955a-52fa4a62f0d0', groupId: 'org.jenkins-ci.main', nexusUrl: '10.250.64.113:8081/nexus', nexusVersion: 'nexus2', protocol: 'http', repository: 'SNAPSHOTS', version: '1.4.0.BUILD-SNAPSHOT'
   }
} 
